/*
 * -----------------------------------------------------------------------------
 *
 * Copyright 2019 - 2022 UDT-IA, IIIA-CSIC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * -----------------------------------------------------------------------------
 */

package eu.internetofus.common.components.service;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import eu.internetofus.common.components.models.CommunityMember;
import eu.internetofus.common.components.models.CommunityProfile;
import eu.internetofus.common.components.models.ProtocolNorm;
import eu.internetofus.common.components.profile_manager.WeNetProfileManager;
import eu.internetofus.common.model.JsonObjectDeserializer;
import eu.internetofus.common.model.Model;
import eu.internetofus.common.model.ReflectionModel;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Schema;
import io.vertx.core.Future;
import io.vertx.core.Promise;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;
import java.util.ArrayList;
import java.util.List;

/**
 * The application of a WeNet use case scenario.
 *
 * @author UDT-IA, IIIA-CSIC
 */
@Schema(hidden = true, name = "App", description = "The app of a wenet use case scenario.")
public class App extends ReflectionModel implements Model {

  /**
   * The instant of the creation.
   */
  @Schema(description = "The UTC epoch timestamp representing the account creation instant.", example = "1563871899")
  public long creationTs;

  /**
   * The instant of the last update.
   */
  @Schema(description = "The UTC epoch timestamp representing the last update instant.", example = "1563898764")
  public long lastUpdateTs;

  /**
   * The identifier of the application.
   */
  @Schema(description = "The Id of the wenet app.", example = "3e557acc-e846-4736-8218-3f64d8e68d8c")
  public String appId;

  /**
   * The identifier of the application.
   */
  @Schema(description = "The Id of the wenet app.", example = "aisfuh9s8fnkdfhg9d8fgkdjfgnhkduyfgidjkfgkdh")
  public String appToken;

  /**
   * The URL to post the messages for the application.
   */
  @Schema(description = "The endpoint responsible for receiving the messages generated by the wenet platform for the users.", example = "https://app.endpoint.com/messages")
  public String messageCallbackUrl;

  /**
   * The metadata of the application.
   */
  @Schema(type = "object", description = "App metadata (such as its name and description).", implementation = Object.class)
  @JsonDeserialize(using = JsonObjectDeserializer.class)
  public JsonObject metadata;

  /**
   * The platform that the application is allowed to use.
   */
  @ArraySchema(schema = @Schema(type = "object"), arraySchema = @Schema(description = "The allowed platform for the application.", implementation = Object.class))
  @JsonDeserialize(contentUsing = JsonObjectDeserializer.class)
  public List<JsonObject> allowedPlatforms;

  /**
   * Obtain or create the community
   *
   * @param id    identifier of the application to get or create the default
   *              community.
   * @param vertx event bus to use.
   *
   * @return the default community of an application, if it does not exist try to
   *         create it.
   */
  public static Future<CommunityProfile> getOrCreateDefaultCommunityFor(final String id, final Vertx vertx) {

    final Promise<CommunityProfile> promise = Promise.promise();
    if (id == null) {

      promise.fail("Cannot found community for an application without identifier");

    } else {

      WeNetService.createProxy(vertx).retrieveAppUserIds(id).onComplete(retrieveUsers -> {

        if (retrieveUsers.failed()) {

          promise.fail(retrieveUsers.cause());

        } else {

          final var appUsers = retrieveUsers.result();
          WeNetProfileManager.createProxy(vertx)
              .retrieveCommunityProfilesPage(id, null, null, null, null, "-_creationTs", 0, 1)
              .onComplete(retrievePage -> {

                CommunityProfile community;
                var page = retrievePage.result();
                if (retrievePage.failed() || page.communities == null || page.communities.isEmpty()) {

                  page = null;
                  community = new CommunityProfile();
                  community.appId = id;
                  community.name = "Community of " + id;
                  community.norms = new ArrayList<>();
                  final var incentiveNorm = new ProtocolNorm();
                  incentiveNorm.description = "Send the incentive to the user";
                  incentiveNorm.whenever = "is_received_send_incentive(Incentive)";
                  incentiveNorm.thenceforth = "send_user_message('INCENTIVE',Incentive)";
                  community.norms.add(incentiveNorm);

                } else {

                  community = page.communities.get(0);

                }

                List<CommunityMember> currentMembers = new ArrayList<>();
                if (community.members != null) {

                  currentMembers = community.members;
                }
                community.members = new ArrayList<>();

                var changes = 0;
                for (var i = 0; i < appUsers.size(); i++) {

                  final var appUserId = appUsers.getString(i);
                  var found = false;
                  final var iter = currentMembers.iterator();
                  while (iter.hasNext()) {

                    final var member = iter.next();
                    if (appUserId.equals(member.userId)) {

                      iter.remove();
                      community.members.add(member);
                      found = true;
                      break;
                    }
                  }

                  if (!found) {

                    final var member = new CommunityMember();
                    member.userId = appUsers.getString(i);
                    community.members.add(member);
                    changes++;
                  }

                }

                if (page == null) {

                  WeNetProfileManager.createProxy(vertx).createCommunity(community).onComplete(promise);

                } else if (changes > 0) {

                  WeNetProfileManager.createProxy(vertx).updateCommunity(community).onComplete(promise);

                } else {

                  if (community.members.isEmpty()) {

                    community.members = null;
                  }
                  promise.complete(community);
                }

              });
        }

      });

    }
    return promise.future();

  }

}
