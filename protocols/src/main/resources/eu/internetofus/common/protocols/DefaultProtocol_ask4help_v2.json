{
	"id": "ask4help_v2",
	"name": "Ask for Help",
	"description": "Ask a question into your community to helps you",
	"keywords": [
		"question",
		"answer",
		"help"
	],
	"attributes": {
		"type": "object",
		"properties": {
			"kindOfAnswerer": {
				"type": "string",
				"description": "The type of user taht should answer the question",
				"enum": [
					"ask_to_different",
					"ask_to_similar",
					"ask_to_anyone"
				],
				"default": "\"ask_to_anyone\""
			},
			"answeredDetails": {
				"type": "string",
				"nullable": true
			}
		},
		"required": [
			"kindOfAnswerer"
		]
	},
	"transactions": {
		"answerTransaction": {
			"type": "object",
			"description": "Answer to a question",
			"properties": {
				"answer": {
					"type": "string",
					"description": "The answer to the question"
				}
			}
		},
		"notAnswerTransaction": {
			"description": "Ignore a question",
			"type": "object",
			"nullable": true
		},
		"bestAnswerTransaction": {
			"type": "object",
			"description": "Pick the best answer",
			"properties": {
				"transactionId": {
					"type": "string",
					"description": "The id of the picked answer transaction"
				},
				"reason": {
					"type": "string",
					"nullable": true,
					"description": "The reason why the specific answer was picked"
				}
			}
		},
		"moreAnswerTransaction": {
			"description": "Ask some more users",
			"type": "object",
			"nullable": true
		},
		"reportQuestionTransaction": {
			"type": "object",
			"description": "Report question",
			"properties": {
				"reason": {
					"type": "string",
					"nullable": true,
					"description": "The reason why the specific answer was picked"
				},
				"comment": {
					"type": "string",
					"nullable": true,
					"description": "A specific comment by the reporting user"
				}
			}
		},
		"reportAnswerTransaction": {
			"type": "object",
			"description": "Report answer",
			"properties": {
				"transactionId": {
					"type": "string",
					"description": "The id of the picked answer transaction"
				},
				"reason": {
					"type": "string",
					"nullable": true,
					"description": "The reason why the specific answer was picked"
				},
				"comment": {
					"type": "string",
					"nullable": true,
					"description": "A specific comment by the reporting user"
				}
			}
		},
		"rankAnswers": {
			"type": "object",
			"nullable": true,
			"description": "Calculate the ranking of the received answers"
		}
	},
	"callbacks": {
		"QuestionToAnswerMessage": {
			"description": "Question to answer",
			"type": "object",
			"properties": {
				"taskId": {
					"type": "string",
					"description": "The id of the task assiciated with the question"
				},
				"question": {
					"type": "string",
					"description": "The question to answer to"
				},
				"userId": {
					"type": "string",
					"description": "The id of the user who proposed the question"
				}
			}
		},
		"AnsweredQuestionMessage": {
			"description": "Answer to question",
			"type": "object",
			"properties": {
				"taskId": {
					"type": "string",
					"description": "The id of the task assiciated with the question"
				},
				"answer": {
					"type": "string",
					"description": "The answer to the question"
				},
				"transactionId": {
					"type": "string",
					"description": "The id of the transaction associated to the answer"
				},
				"userId": {
					"type": "string",
					"description": "The id of the user who answered the question"
				}
			}
		},
		"AnsweredPickedMessage": {
			"description": "Answer picked",
			"type": "object",
			"properties": {
				"taskId": {
					"type": "string",
					"description": "The id of the task associated with the question"
				},
				"transactionId": {
					"type": "string",
					"description": "The id of the transaction associated to the answer"
				}
			}
		},
		"AnswersRanking": {
			"description": "The ranking of the answers",
			"type": "object",
			"properties": {
				"taskId": {
					"type": "string",
					"description": "The id of the task associated with the question"
				},
				"ranking": {
					"type": "array",
					"description": "The ranking of the users by its answer",
					"items": {
						"type": "object",
						"description": "The user answer.",
						"properties": {
							"userId": {
								"type": "string",
								"description": "User identifier"
							},
							"answer": {
								"type": "string",
								"description": "User answer"
							}
						}
					}
				}
			}
		}
	},
	"norms": [
		{
			"whenever": "is_received_created_task() and get_app_users_except_me(Unanswered)",
			"thenceforth": "add_created_transaction() and send_messages(Unanswered,'notifyNewQuestionAndAnswer',json([]))"
		},
		{
			"whenever": "is_received(_,'notifyNewQuestionAndAnswer',_) and get_task_id(TaskId) and get_task_goal_name(Question) and get_task_requester_id(RequesterId)",
			"thenceforth": "send_user_message('QuestionToAnswerMessage',json([taskId=TaskId,question=Question,userId=RequesterId]))"
		},
		{
			"whenever": "is_received_do_transaction('answerTransaction',Attributes) and not(is_task_closed()) and get_attribute(Answer,answer,Attributes) and get_task_requester_id(RequesterId)",
			"thenceforth": "add_message_transaction() and send_message(RequesterId,'answerTransaction',json([answer=Answer]))"
		},
		{
			"whenever": "is_received(SenderId,'answerTransaction',Attributes) and get_attribute(Answer,answer,Attributes) and get_task_id(TaskId) and get_transaction_id(TransactionId)",
			"thenceforth": "send_user_message('AnsweredQuestionMessage',json([taskId=TaskId,answer=Answer,transactionId=TransactionId,userId=SenderId]))"
		},
		{
			"whenever": "is_received_do_transaction('bestAnswerTransaction',Attributes) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(Transaction,TransactionId) and wenet_actioneer_id_of_transaction(ActioneerId,Transaction)",
			"thenceforth": "add_message_transaction() and close_task() and send_message(ActioneerId,'bestAnswerTransaction',json([transactionId=TransactionId]))"
		},
		{
			"whenever": "is_received(_,'bestAnswerTransaction',Attributes) and get_attribute(TransactionId,transactionId,Attributes) and get_task_id(TaskId)",
			"thenceforth": "send_user_message('AnsweredPickedMessage',json([taskId=TaskId,transactionId=TransactionId]))"
		},
		{
			"whenever": "is_received_do_transaction('notAnswerTransaction',_) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"whenever": "is_received_do_transaction('moreAnswerTransaction',_) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"whenever": "is_received_do_transaction('reportQuestionTransaction',_) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"whenever": "is_received_do_transaction('reportAnswerTransaction',Attributes) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(_,TransactionId)",
			"thenceforth": "add_message_transaction()"
		},
		{
			"whenever": "is_received_do_transaction('rankAnswers',_) and not(is_task_closed()) and get_profile_id(Me) and get_task_requester_id(Me) and filter_transactions(UserAnswers,is_answer_transaction,answer_transaction_to_user_answer)",
			"thenceforth": "add_message_transaction() and answers_ranking(Ranking,UserAnswers) and send_message(Me,'answersRanking',json([ranking=Ranking]))",
			"ontology": ":- dynamic is_answer_transaction/1, answer_transaction_to_user_answer/2. is_answer_transaction(T):- wenet_label_of_transaction('answerTransaction',T). answer_transaction_to_user_answer(UserAnswer,Transaction):- wenet_actioneer_id_of_transaction(UserId,Transaction), wenet_attributes_of_transaction(json(Attributes),Transaction), member(answer=Answer,Attributes), wenet_new_user_answer(UserAnswer,UserId,Answer)."
		},
		{
			"whenever": "is_received(_,'answersRanking',json([ranking=Ranking])) and get_task_id(TaskId)",
			"thenceforth": "send_user_message('AnswersRanking',json([taskId=TaskId,ranking=Ranking]))"
		}
	]
} 
