{
   "id":"ask4help_v3",
   "name":"Ask for Help",
   "description":"Ask a question into your community to helps you",
   "keywords":[
      "question",
      "answer",
      "help"
   ],
   "attributes":{
      "type":"object",
      "properties":{
         "domain":{
            "description":"The chosen domain of the question",
            "type":"string",
            "nullable":false,
            "enum":[
               "studying_career",
               "local_university",
               "local_things",
               "physical_activity",
               "cultural_interests",
               "food_and_cooking",
               "cinema_theatre",
               "music",
               "arts_and_crafts",
               "life_ponders",
               "varia_misc"
            ]
         },
         "domainInterest":{
            "description":"The kind of interest in the domain the user should have to receive the question",
            "type":"string",
            "nullable":false,
            "enum":[
               "similar",
               "indifferent",
               "different"
            ]
         },
         "beliefsAndValues":{
            "description":"The kind of similarity in beliefs and values the user should have to receive the question",
            "type":"string",
            "nullable":false,
            "enum":[
               "similar",
               "indifferent",
               "different"
            ]
         },
         "sensitive":{
            "description":"Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question",
            "type":"boolean",
            "default":"false",
            "nullable":false
         },
         "anonymous":{
            "description":"Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
            "type":"boolean",
            "default":"false",
            "nullable":false
         },
         "socialCloseness":{
            "description":"The kind of social closeness the user should have to receive the question",
            "type":"string",
            "nullable":false,
            "enum":[
               "similar",
               "indifferent",
               "different"
            ]
         },
         "positionOfAnswerer":{
            "description":"How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",
            "type":"string",
            "nullable":false,
            "enum":[
               "nearby",
               "anywhere"
            ]
         },
         "maxUsers":{
            "description":"The maximum number of users to which propose the question and also in the case the user requests to ask to more users",
            "type":"integer",
            "nullable":false,
            "minimum":1,
            "default":"5"
         },
         "maxAnswers":{
            "description":"The maximum number of answers before reaching the expiration of the queston",
            "type":"integer",
            "nullable":false,
            "minimum":1,
            "default":"15"
         },
         "expirationDate":{
            "description":"Incremented epoch datetime from creation of the task, indicating the task expiration",
            "type":"integer",
            "nullable":false
         }
      },
      "required":[
         "domain",
         "domainInterest",
         "beliefsAndValues",
         "sensitive",
         "anonymous",
         "socialCloseness",
         "positionOfAnswerer",
         "maxUsers",
         "maxAnswers",
         "expirationDate"
      ]
   },
   "transactions":{
      "answerTransactionLong":{
         "title":"Transaction to mark large answers on the incentive server",
         "type":"object",
         "nullable":true
      },
      "answerTransaction":{
         "title":"Answer to a question",
         "type":"object",
         "properties":{
            "answer":{
               "type":"string",
               "description":"The answer given by the user to the question"
            },
            "anonymous":{
               "description":"Whether to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
               "type":"boolean",
               "default":"false",
               "nullable":false
            }
         },
         "required":[
            "answer",
            "anonymous"
         ]
      },
      "notAnswerTransaction":{
         "title":"Ignore a question",
         "type":"object",
         "nullable":true
      },
      "reportQuestionTransaction":{
         "title":"Report a question",
         "type":"object",
         "properties":{
            "reason":{
               "description":"The reason why the question was reported",
               "type":"string",
               "nullable":false,
               "enum":[
                  "abusive",
                  "spam"
               ]
            }
         },
         "required":[
            "reason"
         ]
      },
      "bestAnswerTransaction":{
         "title":"Pick the best answer",
         "type":"object",
         "properties":{
            "transactionId":{
               "description":"The id of the picked answer transaction",
               "type":"string",
               "nullable":false
            },
            "reason":{
               "description":"The reason why the specific answer was picked",
               "type":"string",
               "nullable":false,
               "enum":[
                  "funny",
                  "thoughtful",
                  "informative",
                  "creative",
                  "honest",
                  "kind",
                  "personal"
               ]
            },
            "helpful":{
               "description":"How well the bot is good in connecting with users following intentions",
               "type":"string",
               "nullable":false,
               "enum":[
                  "notAtAllHelpful",
                  "slightlyHelpful",
                  "somewhatHelpful",
                  "veryHelpful",
                  "extremelyHelpful"
               ]
            }
         },
         "required":[
            "transactionId",
            "reason",
            "helpful"
         ]
      },
      "moreAnswerTransaction":{
         "title":"Ask some more users",
         "type":"object",
         "properties":{
            "expirationDate":{
               "description":"Incremented epoch datetime from creation of the task, indicating the task expiration",
               "type":"integer",
               "nullable":false
            }
         },
         "required":[
            "expirationDate"
         ]
      },
      "reportAnswerTransaction":{
         "title":"Report an answer",
         "type":"object",
         "properties":{
            "transactionId":{
               "description":"The id of the answer transaction that was reported",
               "type":"string",
               "nullable":false
            },
            "reason":{
               "description":"The reason why the specific answer was reported",
               "type":"string",
               "nullable":false,
               "enum":[
                  "abusive",
                  "spam"
               ]
            }
         },
         "required":[
            "transactionId",
            "reason"
         ]
      },
      "likeAnswerTransaction":{
         "title":"Like an answer",
         "type":"object",
         "properties":{
            "transactionId":{
               "description":"The id of the answer transaction that was liked",
               "type":"string",
               "nullable":false
            }
         },
         "required":[
            "transactionId"
         ]
      }
   },
   "callbacks":{
      "QuestionToAnswerMessage":{
         "title":"Question to answer",
         "type":"object",
         "properties":{
            "taskId":{
               "description":"The id of the task associated with the question",
               "type":"string",
               "nullable":false
            },
            "question":{
               "description":"The question to answer to",
               "type":"string",
               "nullable":false
            },
            "userId":{
               "description":"The id of the user who proposed the question",
               "type":"string",
               "nullable":false
            },
            "sensitive":{
               "description":"Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question",
               "type":"boolean",
               "default":"false",
               "nullable":false
            },
            "anonymous":{
               "description":"Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
               "type":"boolean",
               "default":"false",
               "nullable":false
            },
            "positionOfAnswerer":{
               "description":"How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",
               "type":"string",
               "nullable":false,
               "enum":[
                  "nearby",
                  "anywhere"
               ]
            }
         },
         "required":[
            "taskId",
            "question",
            "userId",
            "sensitive",
            "anonymous",
            "positionOfAnswerer"
         ]
      },
      "AnsweredQuestionMessage":{
         "title":"Answer to question",
         "type":"object",
         "properties":{
            "taskId":{
               "description":"The id of the task associated with the question",
               "type":"string",
               "nullable":false
            },
            "question":{
               "description":"The question to answer to",
               "type":"string",
               "nullable":false
            },
            "transactionId":{
               "description":"The id of the transaction associated to the answer",
               "type":"string",
               "nullable":false
            },
            "answer":{
               "description":"The answer to the question",
               "type":"string",
               "nullable":false
            },
            "userId":{
               "description":"The id of the user who answered the question",
               "type":"string",
               "nullable":false
            },
            "anonymous":{
               "description":"Whether the user prefers to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
               "type":"boolean",
               "default":"false",
               "nullable":false
            }
         },
         "required":[
            "taskId",
            "question",
            "transactionId",
            "answer",
            "userId",
            "anonymous"
         ]
      },
      "AnsweredPickedMessage":{
         "title":"Answer picked",
         "type":"object",
         "properties":{
            "taskId":{
               "description":"The id of the task associated with the question",
               "type":"string",
               "nullable":false
            },
            "question":{
               "description":"The question for which was picked the answer",
               "type":"string",
               "nullable":false
            },
            "transactionId":{
               "description":"The id of the transaction associated to the answer",
               "type":"string",
               "nullable":false
            }
         },
         "required":[
            "taskId",
            "question",
            "transactionId"
         ]
      },
      "QuestionExpirationMessage":{
         "title":"Question expiration",
         "type":"object",
         "properties":{
            "taskId":{
               "description":"The id of the task associated with the question",
               "type":"string",
               "nullable":false
            },
            "question":{
               "description":"The question for which was picked the answer",
               "type":"string",
               "nullable":false
            },
            "listOfTransactionIds":{
               "description":"The ids of the transactions associated to the answer",
               "type":"array",
               "items":{
                  "type":"string"
               },
               "nullable":false
            }
         },
         "required":[
            "taskId",
            "question",
            "userId",
            "listOfTransactionIds"
         ]
      }
   },
   "norms":[
      {
         "description":"Obtain the possible users to ask",
         "whenever":"is_received_created_task() and get_app_users_to_ask(Users) and get_task_attribute_value(ExpirationDate,'expirationDate') and get_now(Now) and wenet_math(Delay,ExpirationDate-Now)",
         "thenceforth":"add_created_transaction() and put_task_state_attribute('appUsers',Users) and send_event(_,1,'sortUsersByDiversity',json([])) and send_event(TimerId,Delay,'notifyQuestionExpirationMessage',json([])) and put_task_state_attribute('timerId',TimerId)",
         "ontology":":- use_module(library(random)). :- dynamic get_app_users_to_ask/1. get_app_users_to_ask(AppUsers) :- get_app_users_except_me(UsersExceptMe), random_permutation(AppUsers,UsersExceptMe)."
      },
      {
         "description":"Order the users by its closeness location",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('nearby','positionOfAnswerer') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"normalized_closeness(ClosenessUsers,Users,1000000) and put_task_state_attribute('closenessUsers',ClosenessUsers)"
      },
      {
         "description":"Users location is not important",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('anywhere','positionOfAnswerer') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"wenet_initialize_user_values(ClosenessUsers,Users,1.0) and put_task_state_attribute('closenessUsers',ClosenessUsers)"
      },
      {
         "description":"Order the users by similar social closeness",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('similar','socialCloseness') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"normalized_social_closeness(SocialClosenessUsers,Users) and put_task_state_attribute('socialClosenessUsers',SocialClosenessUsers)"
      },
      {
         "description":"Order the users by different social closeness",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('different','socialCloseness') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"normalized_social_closeness(Socialness,Users) and wenet_negate_user_value(SocialClosenessUsers,Socialness) and put_task_state_attribute('socialClosenessUsers',SocialClosenessUsers)"
      },
      {
         "description":"Users social closeness is indifferent",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('indifferent','socialCloseness') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"wenet_initialize_user_values(SocialClosenessUsers,Users,1.0) and put_task_state_attribute('socialClosenessUsers',SocialClosenessUsers)"
      },
      {
         "description":"Order the users by similar beliefs and values",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('similar','beliefsAndValues') and get_task_state_attribute(Users,'appUsers') and get_profile_attribues_by_beliefs_and_values(Attributes)",
         "thenceforth":"normalized_diversity(Diversity,Users,Attributes) and wenet_negate_user_value(BeliefsAndValuesUsers,Diversity) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)",
         "ontology":":- dynamic get_profile_attribues_by_beliefs_and_values/1. get_profile_attribues_by_beliefs_and_values(['meanings.excitement','meanings.promotion','meanings.existence','meanings.suprapersonal','meanings.interactive','meanings.normative','meanings.extraversion','meanings.agreeableness','meanings.consientiousness','meanings.neuroticism','meanings.openness'])."
      },
      {
         "description":"Order the users by different beliefs and values",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('different','beliefsAndValues') and get_task_state_attribute(Users,'appUsers') and get_profile_attribues_by_beliefs_and_values(Attributes)",
         "thenceforth":"normalized_diversity(BeliefsAndValuesUsers,Users,Attributes) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)"
      },
      {
         "description":"Users beliefs and values is indifferent",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('indifferent','beliefsAndValues') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"wenet_initialize_user_values(BeliefsAndValuesUsers,Users,1.0) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)"
      },
      {
         "description":"Order the users by domain",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('similar','domainInterest') and get_task_state_attribute(Users,'appUsers') and get_task_attribute_value(Domain,'domain') and domain_attributes(Domain,Attributes)",
         "thenceforth":"normalized_diversity(Diversity,Users,Attributes) and wenet_negate_user_value(DomainInterestUsers,Diversity) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)",
         "ontology":":- dynamic domain_attributes/2, attributes_similars_to_question/1. domain_attributes('studying_career',['competences.u_active','competences.u_read','competences.u_essay','competences.u_org','competences.u_balance','competences.u_assess','competences.u_theory','competences.u_pract']). domain_attributes('local_university',['competences.c_locfac','competences.c_accom']). domain_attributes('local_things',['competences.c_accom']). domain_attributes('physical_activity',['competences.c_team_sp','competences.c_ind_sp','competences.c_watch_sp']). domain_attributes('cultural_interests',['competences.c_lit','competences.c_creatlit','competences.c_perf_art','competences.c_musgall']). domain_attributes('food_and_cooking',['competences.c_food','competences.c_eating']). domain_attributes('cinema_theatre',['competences.c_plays','competences.c_perf_plays']). domain_attributes('music',['competences.c_app_mus','competences.c_perf_mus']). domain_attributes('arts_and_crafts',['competences.c_perf_art','competences.c_musgall']). domain_attributes('life_ponders',Attributes) :- attributes_similars_to_question(Attributes) . domain_attributes('varia_misc',Attributes) :- attributes_similars_to_question(Attributes) . attributes_similars_to_question(Attributes) :- (  get_task_goal_name(Question),  my_profile_attributes_similars_to(SimAttributes,Question,0.4)  -> true  ; SimAttributes = [] ), !, (  length(SimAttributes,0)  -> Attributes = ['competences.u_active','competences.u_read','competences.u_essay','competences.u_org','competences.u_balance','competences.u_assess','competences.u_theory','competences.u_pract','competences.c_locfac','competences.c_accom','competences.c_team_sp','competences.c_ind_sp','competences.c_watch_sp','competences.c_lit','competences.c_creatlit','competences.c_perf_art','competences.c_musgall','competences.c_food','competences.c_eating','competences.c_plays','competences.c_perf_plays','competences.c_app_mus','competences.c_perf_mus']  ; Attributes = SimAttributes ), retractall(attributes_similars_to_question(_)), asserta(attributes_similars_to_question(Attributes))."
      },
      {
         "description":"Order the users by different domain",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('different','domainInterest') and get_task_state_attribute(Users,'appUsers') and get_task_attribute_value(Domain,'domain') and domain_attributes(Domain,Attributes)",
         "thenceforth":"normalized_diversity(DomainInterestUsers,Users,Attributes) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)"
      },
      {
         "description":"Domain is indifferent",
         "whenever":"is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('indifferent','domainInterest') and get_task_state_attribute(Users,'appUsers')",
         "thenceforth":"wenet_initialize_user_values(DomainInterestUsers,Users,1.0) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)"
      },
      {
         "description":"After sorting users by eack diversity dimension aggregate them",
         "whenever":"is_received_event('sortUsersByDiversity',_)",
         "thenceforth":"send_event(_,1,'aggregateUsersByDiversity',json([]))"
      },
      {
         "description":"After aggregate all the diversity user dimensions ask to them",
         "whenever":"is_received_event('aggregateUsersByDiversity',_) and get_task_state_attribute(ClosenessUsers,'closenessUsers') and get_task_state_attribute(SocialClosenessUsers,'socialClosenessUsers') and get_task_state_attribute(BeliefsAndValuesUsers,'beliefsAndValuesUsers') and get_task_state_attribute(DomainInterestUsers,'domainInterestUsers')",
         "thenceforth":"wenet_product_user_values(Tmp1,ClosenessUsers,SocialClosenessUsers) and wenet_product_user_values(Tmp2,DomainInterestUsers,BeliefsAndValuesUsers) and wenet_product_user_values(Tmp3,Tmp2,Tmp1) and sort_who_to_ask(WhoToAsk,Tmp3) and wenet_user_values_to_user_ids(Unasked,WhoToAsk) and put_task_state_attribute('unaskedUserIds',Unasked) and put_task_state_attribute('whoToAskUsers',WhoToAsk) and send_event(_,1,'askUsersByDiversity',json([]))",
         "ontology":":- dynamic sort_who_to_ask/2. sort_who_to_ask(WhoToAsk,Users) :- wenet_sort_user_values_by_value(Sorted,Users), reverse(Sorted,WhoToAsk)."
      },
      {
         "description":"When the task is created filter the posible users to ask about and ask them",
         "whenever":"is_received_event('askUsersByDiversity',_) and who_to_ask(Users)",
         "thenceforth":"send_messages(Users,'notifyNewQuestionAndAnswer',json([]))",
         "ontology":":- dynamic who_to_ask/1.   who_to_ask(Users) :- get_task_state_attribute(Unasked,'unaskedUserIds'), get_task_attribute_value(MaxUsers,'maxUsers'),( ( append(Users,NewUnasked,Unasked), length(Users,MaxUsers) ) -> true; ( Users = Unasked, NewUnasked = [] ) ), !, put_task_state_attribute('unaskedUserIds',NewUnasked), !, retractall(who_to_ask(_)), asserta(who_to_ask(Users))."
      },
      {
         "description":"Notify user if it can help with a question",
         "whenever":"is_received(_,'notifyNewQuestionAndAnswer',_) and get_task_id(TaskId) and get_task_goal_name(Question) and get_task_requester_id(RequesterId) and get_task_attribute_value(Sensitive,'sensitive') and get_task_attribute_value(Anonymous,'anonymous') and get_task_attribute_value(PositionOfAnswerer,'positionOfAnswerer')",
         "thenceforth":"send_user_message('QuestionToAnswerMessage',json([taskId=TaskId,question=Question,userId=RequesterId,sensitive=Sensitive,anonymous=Anonymous,positionOfAnswerer=PositionOfAnswerer]))"
      },
      {
         "description":"Provide an answer to a question",
         "whenever":"is_received_do_transaction('answerTransaction',Attributes) and not(is_task_closed()) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_requester_id(RequesterId)",
         "thenceforth":"add_message_transaction() and send_message(RequesterId,'notifyAnswerTransaction',json([answer=Answer,anonymous=Anonymous]))"
      },
      {
         "description":"Notify the questioneer about the answer",
         "whenever":"is_received(SenderId,'notifyAnswerTransaction',Attributes) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_state_attribute(AnswersCount,'answersCount',0) and get_task_attribute_value(MaxAnswers,'maxAnswers') and <(AnswersCount,MaxAnswers) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId) and get_transaction_id(TransactionId) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and get_transaction_id(TransactionId)",
         "thenceforth":"send_user_message('AnsweredQuestionMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId,answer=Answer,userId=SenderId,anonymous=Anonymous])) and wenet_math(NewAnswersCount,AnswersCount+1) and put_task_state_attribute('answersCount',NewAnswersCount) and wenet_add(NewAnswersTransactionIds,TransactionId,AnswersTransactionIds) and put_task_state_attribute('answersTransactionIds',NewAnswersTransactionIds)"
      },
      {
         "description":"Nothing to do with this transaction only store it",
         "whenever":"is_received_do_transaction('notAnswerTransaction',_) and not(is_task_closed())",
         "thenceforth":"add_message_transaction()"
      },
      {
         "description":"Nothing to do with this transaction only store it",
         "whenever":"is_received_do_transaction('reportQuestionTransaction',_) and not(is_task_closed())",
         "thenceforth":"add_message_transaction()"
      },
      {
         "description":"Notify to the users about best answer",
         "whenever":"is_received_do_transaction('bestAnswerTransaction',Attributes) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(Transaction,TransactionId) and wenet_actioneer_id_of_transaction(ActioneerId,Transaction)",
         "thenceforth":"add_message_transaction() and close_task() and send_message(ActioneerId,'bestAnswerTransaction',json([transactionId=TransactionId]))"
      },
      {
         "description":"Notify the user that its answer is picked",
         "whenever":"is_received(_,'bestAnswerTransaction',Attributes) and get_attribute(TransactionId,transactionId,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId)",
         "thenceforth":"send_user_message('AnsweredPickedMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId]))"
      },
      {
         "description":"Ask more users",
         "whenever":"is_received_do_transaction('moreAnswerTransaction',Attributes) and not(is_task_closed()) and who_to_ask(Users) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_state_attribute(AnswersCount,'answersCount',0) and get_task_attribute_value(MaxAnswers,'maxAnswers') and <(AnswersCount,MaxAnswers) and get_attribute(NewExpirationDate,expirationDate,Attributes) and get_now(Now) and wenet_math(Delay,NewExpirationDate-Now) and get_task_state_attribute(PreviousTimerId,'timerId','')",
         "thenceforth":"add_message_transaction() and send_messages(Users,'notifyNewQuestionAndAnswer',json([])) and set_task_attribute('expirationDate',NewExpirationDate) and wenet_interaction_protocol_engine_delete_event(PreviousTimerId) and send_event(TimerId,Delay,'notifyQuestionExpirationMessage',json([])) and put_task_state_attribute('timerId',TimerId)"
      },
      {
         "description":"Nothing to do with this transaction only store it",
         "whenever":"is_received_do_transaction('reportAnswerTransaction',_) and not(is_task_closed())",
         "thenceforth":"add_message_transaction()"
      },
      {
         "description":"Send expiration message if received max answers",
         "whenever":"is_received(_,'notifyAnswerTransaction',_) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_state_attribute(AnswersCount,'answersCount',0) and get_task_attribute_value(MaxAnswers,'maxAnswers') and wenet_math(MaxAnswers,AnswersCount+1)",
         "thenceforth":"send_event(_,1,'notifyQuestionExpirationMessage',json([]))"
      },
      {
         "description":"Notify user of the expiration message",
         "whenever":"is_received_event('notifyQuestionExpirationMessage',_) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and get_task_id(TaskId) and get_task_goal_name(Question)",
         "thenceforth":"send_user_message('QuestionExpirationMessage',json([taskId=TaskId,question=Question,listOfTransactionIds=AnswersTransactionIds]))"
      }
   ]
}