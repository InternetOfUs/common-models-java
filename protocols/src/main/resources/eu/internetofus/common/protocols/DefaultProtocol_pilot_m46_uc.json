{
	"id": "pilot_m46_uc",
	"name": "Ask for Help",
	"description": "Ask a question into your community to helps you",
	"keywords": [
		"question",
		"answer",
		"help"
	],
	"attributes": {
		"type": "object",
		"properties": {
			"domain": {
				"description": "The chosen domain of the question",
				"type": "string",
				"nullable": false,
				"enum": [
					"exact_sciences",
					"computer_s_science",
					"health",
					"administrative_and_accounting",
					"social_sciences",
					"legal",
					"environmental",
					"design_and_construction",
					"electronic_sciences",
					"academic_life"
				]
			},
			"domainInterest": {
				"description": "The kind of interest in the domain the user should have to receive the question",
				"type": "string",
				"nullable": false,
				"enum": [
					"similar",
					"indifferent",
					"different"
				]
			},
			"beliefsAndValues": {
				"description": "The kind of similarity in beliefs and values the user should have to receive the question",
				"type": "string",
				"nullable": false,
				"enum": [
					"similar",
					"indifferent",
					"different"
				]
			},
			"anonymous": {
				"description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
				"type": "boolean",
				"default": "false",
				"nullable": false
			},
			"competences": {
				"description": "If teh competences of the user are relevent to choose it",
				"type": "string",
				"nullable": false,
				"enum": [
					"relevant",
					"irrelevant"
				]
			},
			"positionOfAnswerer": {
				"description": "How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",
				"type": "string",
				"nullable": false,
				"enum": [
					"nearby",
					"anywhere"
				]
			},
			"maxUsers": {
				"description": "The maximum number of users to which propose the question and also in the case the user requests to ask to more users",
				"type": "integer",
				"nullable": false,
				"minimum": 1,
				"default": "5"
			},
			"maxAnswers": {
				"description": "The maximum number of answers before reaching the expiration of the queston",
				"type": "integer",
				"nullable": false,
				"minimum": 1,
				"default": "15"
			},
			"expirationDate": {
				"description": "Incremented epoch datetime from creation of the task, indicating the task expiration",
				"type": "integer",
				"nullable": false
			}
		},
		"required": [
			"domain",
			"domainInterest",
			"beliefsAndValues",
			"anonymous",
			"competences",
			"positionOfAnswerer",
			"maxUsers",
			"maxAnswers",
			"expirationDate"
		]
	},
	"transactions": {
		"answerTransactionLong": {
			"title": "Transaction to mark large answers on the incentive server",
			"type": "object",
			"nullable": true
		},
		"answerTransaction": {
			"title": "Answer to a question",
			"type": "object",
			"properties": {
				"answer": {
					"type": "string",
					"description": "The answer given by the user to the question"
				},
				"anonymous": {
					"description": "Whether to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				},
				"publish": {
					"description": "Whether to publish the answer or not",
					"type": "boolean",
					"nullable": false
				},
				"publishAnonymously": {
					"description": "Whether to publish the answer anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"nullable": false
				}
			},
			"required": [
				"answer",
				"anonymous",
				"publish",
				"publishAnonymously"
			]
		},
		"notAnswerTransaction": {
			"title": "Ignore a question",
			"type": "object",
			"nullable": true
		},
		"reportQuestionTransaction": {
			"title": "Report a question",
			"type": "object",
			"properties": {
				"reason": {
					"description": "The reason why the question was reported",
					"type": "string",
					"nullable": false,
					"enum": [
						"abusive",
						"spam"
					]
				}
			},
			"required": [
				"reason"
			]
		},
		"bestAnswerTransaction": {
			"title": "Pick the best answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the picked answer transaction",
					"type": "string",
					"nullable": false
				},
				"reason": {
					"description": "The reason why the specific answer was picked",
					"type": "string",
					"nullable": false,
					"enum": [
						"funny",
						"thoughtful",
						"informative",
						"creative",
						"honest",
						"kind",
						"personal"
					]
				},
				"helpful": {
					"description": "How well the bot is good in connecting with users following intentions",
					"type": "string",
					"nullable": false,
					"enum": [
						"notAtAllHelpful",
						"slightlyHelpful",
						"somewhatHelpful",
						"veryHelpful",
						"extremelyHelpful"
					]
				}
			},
			"required": [
				"transactionId",
				"reason",
				"helpful"
			]
		},
		"moreAnswerTransaction": {
			"title": "Ask some more users",
			"type": "object",
			"properties": {
				"expirationDate": {
					"description": "Incremented epoch datetime from creation of the task, indicating the task expiration",
					"type": "integer",
					"nullable": false
				}
			},
			"required": [
				"expirationDate"
			]
		},
		"reportAnswerTransaction": {
			"title": "Report an answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the answer transaction that was reported",
					"type": "string",
					"nullable": false
				},
				"reason": {
					"description": "The reason why the specific answer was reported",
					"type": "string",
					"nullable": false,
					"enum": [
						"abusive",
						"spam"
					]
				}
			},
			"required": [
				"transactionId",
				"reason"
			]
		},
		"likeAnswerTransaction": {
			"title": "Like an answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the answer transaction that was liked",
					"type": "string",
					"nullable": false
				}
			},
			"required": [
				"transactionId"
			]
		}
	},
	"callbacks": {
		"QuestionToAnswerMessage": {
			"title": "Question to answer",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question to answer to",
					"type": "string",
					"nullable": false
				},
				"userId": {
					"description": "The id of the user who proposed the question",
					"type": "string",
					"nullable": false
				},
				"sensitive": {
					"description": "Whether the question is sensitive or not, if it is sensitive the bot will let other people know to take extra care in answering the question",
					"type": "boolean",
					"default": "false",
					"nullable": false
				},
				"anonymous": {
					"description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				},
				"positionOfAnswerer": {
					"description": "How close the users should be to receive the question, if nearby is chosen the question has not the possibility to be postponed because the question requires a fast answer",
					"type": "string",
					"nullable": false,
					"enum": [
						"nearby",
						"anywhere"
					]
				}
			},
			"required": [
				"taskId",
				"question",
				"userId",
				"sensitive",
				"anonymous",
				"positionOfAnswerer"
			]
		},
		"AnsweredQuestionMessage": {
			"title": "Answer to question",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question to answer to",
					"type": "string",
					"nullable": false
				},
				"transactionId": {
					"description": "The id of the transaction associated to the answer",
					"type": "string",
					"nullable": false
				},
				"answer": {
					"description": "The answer to the question",
					"type": "string",
					"nullable": false
				},
				"userId": {
					"description": "The id of the user who answered the question",
					"type": "string",
					"nullable": false
				},
				"anonymous": {
					"description": "Whether the user prefers to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"transactionId",
				"answer",
				"userId",
				"anonymous"
			]
		},
		"AnsweredPickedMessage": {
			"title": "Answer picked",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question for which was picked the answer",
					"type": "string",
					"nullable": false
				},
				"transactionId": {
					"description": "The id of the transaction associated to the answer",
					"type": "string",
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"transactionId"
			]
		},
		"QuestionExpirationMessage": {
			"title": "Question expiration",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question for which was picked the answer",
					"type": "string",
					"nullable": false
				},
				"listOfTransactionIds": {
					"description": "The ids of the transactions associated to the answer",
					"type": "array",
					"items": {
						"type": "string"
					},
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"userId",
				"listOfTransactionIds"
			]
		}
	},
	"norms": [
		{
			"description": "Obtain the possible users to ask",
			"whenever": "is_received_created_task() and get_app_users_to_ask(Users)",
			"thenceforth": "add_created_transaction() and put_task_state_attribute('appUsers',Users) and send_event(_,1,'sortUsersByDiversity',json([])) and send_expiration_event()",
			"ontology": ":- use_module(library(random)). :- dynamic get_app_users_to_ask/1,send_expiration_event/0. get_app_users_to_ask(AppUsers) :- get_app_users_except_me(UsersExceptMe), random_permutation(AppUsers,UsersExceptMe). send_expiration_event() :- get_task_attribute_value(ExpirationDate,'expirationDate'), get_now(Now), wenet_math(Delay,ExpirationDate-Now), send_event(TimerId,Delay,'notifyQuestionExpirationMessage',json([])), put_task_state_attribute('timerId',TimerId)."
		},
		{
			"description": "Calculate domain dimension if it is similar",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('similar','domainInterest') and get_task_state_attribute(Users,'appUsers') and get_task_attribute_value(Domain,'domain') and domain_attributes(Domain,Attributes)",
			"thenceforth": "normalized_diversity(Diversity,Users,Attributes,@(null),false) and wenet_negate_user_value(DomainInterestUsers,Diversity) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)",
			"ontology": ":- dynamic domain_attributes/2. domain_attributes('exact_sciences',['competences.c_logic','competences.c_math','competences.c_fisics','competences.c_probability','competences.c_trigonometry','competences.c_arithmetic','competences.c_algebra','competences.c_analytical_geometry','competences.c_calculus']). domain_attributes('computer_s_science',['competences.c_informatics','competences.c_soft_engineering','competences.c_programing','competences.c_networks','competences.c_operating_systems','competences.c_databases','competences.c_automata_theory','competences.c_data_science','competences.c_compilers']). domain_attributes('health',['competences.c_chemistry','competences.c_biology','competences.c_psicology','competences.c_kinesiology','competences.c_physiotherapy','competences.c_biochemistry','competences.c_odontology','competences.c_nutrition','competences.c_pharmacology','competences.c_anatomy','competences.c_phonoaudiology','competences.c_histology ','competences.c_gynecology','competences.c_oncology','competences.c_psychiatry','competences.c_pediatrics','competences.c_otorhin','competences.c_traumatology','competences.c_dermatology']). domain_attributes('administrative_and_accounting',['competences.c_administration','competences.c_accounting','competences.c_economy','competences.c_marketing','competences.c_int_commerce']). domain_attributes('social_sciences',['competences.c_filosofy','competences.c_history','competences.c_sociology']). domain_attributes('legal',['competences.c_diplomacy','competences.c_politics','competences.c_law','competences.c_notary']). domain_attributes('environmental',['competences.c_environmental_sciences']). domain_attributes('design_and_construction',['competences.c_visual_design','competences.c_digital_design','competences.c_sanitary_installations','competences.c_electrical_installations','competences.c_contr_management','competences.c_structure_design']). domain_attributes('electronic_sciences',['competences.c_anan_electronics','competences.c_digit_electronics','competences.c_telecommunications','competences.c_automation','competences.c_electronics']). domain_attributes('academic_life',['competences.u_active','competences.u_read','competences.u_essay','competences.u_org','competences.u_balance','competences.u_assess','competences.u_theory','competences.u_pract']). domain_attributes(_,[])."
		},
		{
			"description": "Calculate domain dimension if it is different",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('different','domainInterest') and get_task_state_attribute(Users,'appUsers') and get_task_attribute_value(Domain,'domain') and domain_attributes(Domain,Attributes)",
			"thenceforth": "normalized_diversity(DomainInterestUsers,Users,Attributes,@(null),false) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)"
		},
		{
			"description": "Calculate domain dimension if it is indifferent",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('indifferent','domainInterest') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "wenet_initialize_user_values(DomainInterestUsers,Users,@(null)) and put_task_state_attribute('domainInterestUsers',DomainInterestUsers)"
		},
		{
			"description": "Calculate believe and values if it is similar",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('similar','beliefsAndValues') and get_task_state_attribute(Users,'appUsers') and get_profile_attribues_by_beliefs_and_values(Attributes)",
			"thenceforth": "normalized_diversity(Diversity,Users,Attributes,@(null),false) and wenet_negate_user_value(BeliefsAndValuesUsers,Diversity) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)",
			"ontology": ":- dynamic get_profile_attribues_by_beliefs_and_values/1. get_profile_attribues_by_beliefs_and_values(['meanings.neuroticism','meanings.extraversion','meanings.openness','meanings.agreeableness','meanings.conscientiousness'])."
		},
		{
			"description": "Calculate believe and values if it is different",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('different','beliefsAndValues') and get_task_state_attribute(Users,'appUsers') and get_profile_attribues_by_beliefs_and_values(Attributes)",
			"thenceforth": "normalized_diversity(BeliefsAndValuesUsers,Users,Attributes,@(null),false) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)"
		},
		{
			"description": "Calculate believe and values if it is indifferent",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('indifferent','beliefsAndValues') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "wenet_initialize_user_values(BeliefsAndValuesUsers,Users,@(null)) and put_task_state_attribute('beliefsAndValuesUsers',BeliefsAndValuesUsers)"
		},
		{
			"description": "Calculate competences dimenstion if it is relevant",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('relevant','competences') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "calculate_competences_users(CompetencesUsers,Users) and put_task_state_attribute('competencesUsers',CompetencesUsers)",
			"ontology": ":- dynamic calculate_competences_users/2, calculate_competences_value/2, calculate_competences_value_/4, uc_competence_names/1. calculate_competences_users([],[]). calculate_competences_users([CompetencesUser|CompetencesUsers],[User|Users]) :-  calculate_competences_value(Value,User),  wenet_new_user_value(CompetencesUser,User,Value),  calculate_competences_users(CompetencesUsers,Users)  . calculate_competences_value(Value,User) :-  uc_competence_names(Competences),  ( wenet_profile_manager_get_profile(Profile,User)   ->   (    calculate_competences_value_(Sum,Total,Profile,Competences),    ( Total =:= 0.0 -> Value = 0.0 ; Value is Sum/Total)   )   ;   Value = 0.0  )  . uc_competence_names(['c_logic' ,'c_math' ,'c_informatics' ,'c_fisics' ,'c_probability' ,'c_trigonometry' ,'c_arithmetic' ,'c_algebra' ,'c_analytical_geometry' ,'c_chemistry' ,'c_calculus' ,'c_biology' ,'c_administration' ,'c_accounting' ,'c_economy' ,'c_marketing' ,'c_int_commerce' ,'c_filosofy' ,'c_history' ,'c_sociology' ,'c_psicology' ,'c_soft_engineering' ,'c_programing' ,'c_networks' ,'c_operating_systems' ,'c_databases' ,'c_automata_theory' ,'c_data_science' ,'c_compilers' ,'c_diplomacy' ,'c_politics' ,'c_law' ,'c_notary' ,'c_kinesiology' ,'c_physiotherapy' ,'c_biochemistry' ,'c_odontology' ,'c_nutrition' ,'c_pharmacology' ,'c_anatomy' ,'c_phonoaudiology' ,'c_histology' ,'c_gynecology' ,'c_oncology' ,'c_psychiatry' ,'c_pediatrics' ,'c_otorhin' ,'c_traumatology' ,'c_dermatology' ,'c_environmental_sciences' ,'c_visual_design' ,'c_digital_design' ,'c_anan_electronics' ,'c_digit_electronics' ,'c_telecommunications' ,'c_automation' ,'c_electronics' ,'c_sanitary_installations' ,'c_electrical_installations' ,'c_contr_management' ,'c_structure_design']).  calculate_competences_value_(0.0,0.0,_,[]). calculate_competences_value_(Sum,Total,Profile,[Name|Competences]):-  calculate_competences_value_(PrevSum,PrevTotal,Profile,Competences),  get_profile_competence(Competence,Profile,Name,@(null)), get_attribute(Value,level,@(null),Competence), (number(Value)->(Sum is PrevSum + Value,Total is PrevTotal + 1.0);(Sum=PrevSum,Total=PrevTotal))."
		},
		{
			"description": "Calculate competences dimenstion if it is irrelevant",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('irrelevant','competences') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "wenet_initialize_user_values(CompetencesUsers,Users,@(null)) and put_task_state_attribute('competencesUsers',CompetencesUsers)"
		},
		{
			"description": "Calculate physical closeness if it is nearby",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('nearby','positionOfAnswerer') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "normalized_closeness(PhysicalClosenessUsers,Users,500) and put_task_state_attribute('physicalClosenessUsers',PhysicalClosenessUsers)"
		},
		{
			"description": "Calculate physical closeness if it is anywhere",
			"whenever": "is_received_event('sortUsersByDiversity',_) and get_task_attribute_value('anywhere','positionOfAnswerer') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "wenet_initialize_user_values(PhysicalClosenessUsers,Users,@(null)) and put_task_state_attribute('physicalClosenessUsers',PhysicalClosenessUsers)"
		},
		{
			"description": "After sorting users by eack diversity dimension aggregate them",
			"whenever": "is_received_event('sortUsersByDiversity',_)",
			"thenceforth": "send_event(_,1,'aggregateUsersByDiversity',json([]))"
		},
		{
			"description": "If all the dimension are indifferent the match value is 1",
			"whenever": "is_received_event('aggregateUsersByDiversity',_) and are_all_dimensions_indifferent() and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "wenet_initialize_user_values(MatchUsers,Users,1.0) and initialize_users_to_group_0(GroupsUsers,Users) and put_task_state_attribute('matchUsers',MatchUsers) and put_task_state_attribute('groupsUsers',GroupsUsers)",
			"ontology": ":- dynamic are_all_dimensions_indifferent/0, initialize_users_to_group_0/2. are_all_dimensions_indifferent() :- get_task_attribute_value('indifferent','domainInterest'), get_task_attribute_value('indifferent','beliefsAndValues'), get_task_attribute_value('irrelevant','competences'), get_task_attribute_value('anywhere','positionOfAnswerer'). initialize_users_to_group_0([],[]). initialize_users_to_group_0([json([userId=UserId,group=0,explanationType=group_0])|GroupsUsers],[UserId|Users]) :- initialize_users_to_group_0(GroupsUsers,Users)."
		},
		{
			"description": "Calculate match value for at least one requirement",
			"whenever": "is_received_event('aggregateUsersByDiversity',_) and not(are_all_dimensions_indifferent())",
			"thenceforth": "calculate_match_degree_for(MatchUsers,GroupsUsers) and put_task_state_attribute('matchUsers',MatchUsers) and put_task_state_attribute('groupsUsers',GroupsUsers)",
			"ontology": ":- dynamic calculate_match_degree_for/2,  calculate_match_degree_for_/7,  calculate_user_match_degree_for/6,  explanation_type_for/4,  group_indexes_for_domain/5,  group_indexes_for_value/7,  group_indexes_for_competences/5,  group_indexes_for_physical/7,  group_for/5.  calculate_match_degree_for(ReverseSortedMatchUsers,GroupsUsers) :-  get_task_state_attribute(Users,'appUsers'),  get_task_state_attribute(DomainInterestUsers,'domainInterestUsers'),  get_task_state_attribute(BeliefsAndValuesUsers,'beliefsAndValuesUsers'),  get_task_state_attribute(CompetencesUsers,'competencesUsers'),  get_task_state_attribute(PhysicalClosenessUsers,'physicalClosenessUsers'),  calculate_match_degree_for_(MatchUsers,GroupsUsers,Users,DomainInterestUsers,BeliefsAndValuesUsers,CompetencesUsers,PhysicalClosenessUsers),  wenet_sort_user_values_by_value(SortedMatchUsers,MatchUsers),  reverse(ReverseSortedMatchUsers,SortedMatchUsers)  . calculate_match_degree_for_([],[],[],_,_,_,_). calculate_match_degree_for_([MatchUser|MatchUsers],[GroupUser|GroupUsers],[UserId|UserIds],DomainInterestUsers,BeliefsAndValuesUsers,CompetencesUsers,PhysicalClosenessUsers) :-  calculate_user_match_degree_for(MatchUser,GroupUser,UserId,DomainInterestUsers,BeliefsAndValuesUsers,CompetencesUsers,PhysicalClosenessUsers),  calculate_match_degree_for_(MatchUsers,GroupUsers,UserIds,DomainInterestUsers,BeliefsAndValuesUsers,CompetencesUsers,PhysicalClosenessUsers)  .  calculate_user_match_degree_for(MatchUser,GroupUser,UserId,DomainInterestUsers,BeliefsAndValuesUsers,CompetencesUsers,PhysicalClosenessUsers) :-  wenet_value_of_user_id_from_user_values(DomainInterest,UserId,DomainInterestUsers,@(null)),  wenet_value_of_user_id_from_user_values(BeliefsAndValues,UserId,BeliefsAndValuesUsers,@(null)),  wenet_value_of_user_id_from_user_values(Competences,UserId,CompetencesUsers,@(null)),  wenet_value_of_user_id_from_user_values(PhysicalCloseness,UserId,PhysicalClosenessUsers,@(null)),  group_indexes_for_domain(MdX,X,SS,SB,DomainInterest),  group_indexes_for_value(MdV,Y,SS1,SB1,SS,SB,BeliefsAndValues),  group_indexes_for_competences(MdC,Z,HS,HB,Competences),  group_indexes_for_physical(MdPC,W,HS1,HB1,HS,HB,PhysicalCloseness),  ( (X = 0 , Y = 0, Z = 0, W = 0) -> Value = 0 ; Value is (X*MdX + Y*MdV + Z*MdC + W*MdPC )/(X + Y + Z + W) ),  wenet_new_user_value(MatchUser,UserId,Value),  group_for(Group,SS1,SB1,HS1,HB1),  explanation_type_for(ExplanationType,Group,PhysicalCloseness,Competences),    GroupUser = json([userId=UserId,group=Group,explanationType=ExplanationType])  .  group_indexes_for_domain(DomainInterest,1,1,0,DomainInterest) :-  number(DomainInterest),  >(DomainInterest,0.0),  !. group_indexes_for_domain(0.0,0,0,1,DomainInterest) :-  number(DomainInterest),  DomainInterest =:= 0.0,  !. group_indexes_for_domain(0.0,0,0,0,_) :-  !.   group_indexes_for_value(BeliefsAndValues,1,SS1,SB,SS,SB,BeliefsAndValues) :-  number(BeliefsAndValues),  >(BeliefsAndValues,0.0),  !,  SS1 is SS + 1. group_indexes_for_value(0.0,0,SS,SB1,SS,SB,BeliefsAndValues) :-  number(BeliefsAndValues),  BeliefsAndValues =:= 0.0,  !,  SB1 is SB + 1. group_indexes_for_value(0.0,0,SS,SB,SS,SB,_) :-  !.   group_indexes_for_competences(Competences,1,1,0,Competences) :-  number(Competences),  >(Competences,0.0),  !. group_indexes_for_competences(0.0,0,0,1,Competences) :-  number(Competences),  Competences =:= 0.0,  !. group_indexes_for_competences(0.0,0,0,0,_) :-  !.  group_indexes_for_physical(PhysicalCloseness,1,HS1,HB,HS,HB,PhysicalCloseness) :-  number(PhysicalCloseness),  >(PhysicalCloseness,0.0),  !,  HS1 is HS + 1. group_indexes_for_physical(0.0,0,HS,1,HS,_,PhysicalCloseness) :-  number(PhysicalCloseness),  PhysicalCloseness =:= 0.0,  !. group_indexes_for_physical(0.0,0,HS,HB,HS,HB,_) :-  !.  group_for(Group,SS,SB,_,0):-  >(SS,0),  !,  Group is 1 + SB. group_for(3,_,_,_,0):-  !. group_for(Group,SS,SB,1,1):-  >(SS,0),  !,  Group is 5 + SB. group_for(6,_,_,1,1):-  !. group_for(Group,SS,SB,_,_):-  >(SS,0),  !,  Group is 7 + SB. group_for(9,_,_,_,_):-  !.  explanation_type_for(group_0,0,_,_) :- !. explanation_type_for(group_1,1,_,_) :- !. explanation_type_for(group_2_3_a,Group,MdPC,MdC) :-  (Group = 2; Group = 3),  number(MdPC),  number(MdC),  !. explanation_type_for(group_2_3_b,Group,MdPC,MdC) :-  (Group = 2; Group = 3),  not(number(MdPC)),  number(MdC),  !. explanation_type_for(group_2_3_c,Group,_,_) :-  (Group = 2; Group = 3),  !. explanation_type_for(group_4_a,4,MdPC,MdC) :-  number(MdPC),  MdPC =:= 0.0,  number(MdC),  >(MdC,0.0),  !. explanation_type_for(group_4_b,4,_,_) :-  !. explanation_type_for(group_5_6_a,Group,MdPC,MdC) :-  (Group = 5; Group = 6),  number(MdPC),  MdPC =:= 0.0,  number(MdC),  >(MdC,0.0),  !. explanation_type_for(group_5_6_b,Group,_,_) :-  (Group = 5; Group = 6),  !. explanation_type_for(group_7_8_a,Group,MdPC,MdC) :-  (Group = 7; Group = 8),  number(MdPC),  number(MdC),  !. explanation_type_for(group_7_8_b,Group,MdPC,MdC) :-  (Group = 7; Group = 8),  not(number(MdPC)),  number(MdC),  !. explanation_type_for(group_7_8_c,Group,_,_) :-  (Group = 7; Group = 8),  !. explanation_type_for(group_9,9,_,_) :- !. explanation_type_for(@(null),_,_,_) :- !. "
		},
		{
			"description": "After caluclated the matching go to rank them",
			"whenever": "is_received_event('aggregateUsersByDiversity',_)",
			"thenceforth": "send_event(_,1,'rankMatchUsers',json([]))"
		},
		{
			"description": "Call the social context builder to rank the user by its match",
			"whenever": "is_received_event('rankMatchUsers',_) and get_task_state_attribute(MatchUsers,'matchUsers',[])",
			"thenceforth": "wenet_user_values_to_user_ids(UserIds,MatchUsers) and social_ranking(RankedUsers,UserIds) and put_task_state_attribute('unaskedUserIds',RankedUsers) and put_task_state_attribute('rankedUsers',RankedUsers) and send_event(_,1,'askUsersByDiversity',json([]))"
		},
		{
			"description": "When the task is created filter the posible users to ask about and ask them",
			"whenever": "is_received_event('askUsersByDiversity',_) and who_to_ask(Users)",
			"thenceforth": "send_messages(Users,'notifyNewQuestionAndAnswer',json([]))",
			"ontology": ":- dynamic who_to_ask/1.   who_to_ask(Users) :- get_task_state_attribute(Unasked,'unaskedUserIds'), get_task_attribute_value(MaxUsers,'maxUsers'),( ( append(Users,NewUnasked,Unasked), length(Users,MaxUsers) ) -> true; ( Users = Unasked, NewUnasked = [] ) ), !, put_task_state_attribute('unaskedUserIds',NewUnasked), !, retractall(who_to_ask(_)), asserta(who_to_ask(Users))."
		},
		{
			"description": "Notify user if it can help with a question",
			"whenever": "is_received(_,'notifyNewQuestionAndAnswer',_) and get_task_id(TaskId) and get_task_goal_name(Question) and get_task_requester_id(RequesterId) and get_task_attribute_value(Sensitive,'sensitive') and get_task_attribute_value(Anonymous,'anonymous') and get_task_attribute_value(PositionOfAnswerer,'positionOfAnswerer')",
			"thenceforth": "send_user_message('QuestionToAnswerMessage',json([taskId=TaskId,question=Question,userId=RequesterId,sensitive=Sensitive,anonymous=Anonymous,positionOfAnswerer=PositionOfAnswerer]))"
		},
		{
			"description": "Provide an answer to a question",
			"whenever": "is_received_do_transaction('answerTransaction',Attributes) and not(is_task_closed()) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_requester_id(RequesterId)",
			"thenceforth": "add_message_transaction() and send_message(RequesterId,'notifyAnswerTransaction',json([answer=Answer,anonymous=Anonymous]))"
		},
		{
			"description": "Notify the questioneer about the answer",
			"whenever": "is_received(SenderId,'notifyAnswerTransaction',Attributes) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_attribute_value(MaxAnswers,'maxAnswers') and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and <(AnswersCount,MaxAnswers) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId) and get_transaction_id(TransactionId) and get_task_state_attribute(GroupsUsers,'groupsUsers')",
			"thenceforth": "send_user_message('AnsweredQuestionMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId,answer=Answer,userId=SenderId,anonymous=Anonymous])) and wenet_add(NewAnswersTransactionIds,TransactionId,AnswersTransactionIds) and put_task_state_attribute('answersTransactionIds',NewAnswersTransactionIds) and send_event(_,1,'checkMaxAnswers',json([])) and explanation(ExplanationTitle,ExplanationText,SenderId,GroupsUsers) and send_user_message('TextualMessage',json([title=ExplanationTitle,text=ExplanationText]))",
			"ontology": ":- dynamic  explanation/4,  explanation/5,  explanation_title/2,  explanation_text/3.  explanation(ExplanationTitle,ExplanationText,UserId,GroupsUsers) :-  get_profile_language(Lang),  explanation(ExplanationTitle,ExplanationText,UserId,GroupsUsers,Lang). explanation(ExplanationTitle,ExplanationText,UserId,GroupsUsers,Lang) :-  explanation_title(ExplanationTitle,Lang), (   ( wenet_json_element_with(json(Group),GroupsUsers,userId=UserId,json([explanationType=group_0])), member(explanationType=Type,Group))   -> true   ; Type = group_0  ),  explanation_text(ExplanationText,Type,Lang). explanation_title('Why is this user chosen?',_). explanation_text('Recall that there were no requirements set w.r.t academic life domain, values, competences or physical closeness. Nevertheless, we tried to increase the gender diversity of selected users.',group_0,_). explanation_text('This user fulfils all requirements. While searching for users, we tried to increase the gender diversity of selected users.',group_1,_). explanation_text('Not enough members fulfil the requirements. To find some answers, we had to choose some that do not fulfil any, like this user. While doing so, we also tried to increase the gender diversity of selected users.',group_9,_). explanation_text('This user fulfils the physical closeness and competence requirements, but not all of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_2_3_a,_). explanation_text('This user fulfils the competence requirement, but not all of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_2_3_b,_). explanation_text('This user fulfils the physical closeness requirement, but not all of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_2_3_c,_). explanation_text('This user does not fulfil neither the physical closeness and competence requirements, nor some of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_7_8_a,_). explanation_text('This user does not fulfil neither the competence requirement, nor some of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_7_8_b,_). explanation_text('This user does not fulfil neither the physical closeness requirement, nor some of the other requirements. To find some answers, we had to relax some of the other requirements. We also tried to increase the gender diversity of selected users.',group_7_8_c,_). explanation_text('This user does not fulfil the physical closeness requirement. To find some answers, we had to relax this requirement. We also tried to increase the gender diversity of selected users.',group_4_a,_). explanation_text('This user does not fulfil the competence requirement. To find some answers, we had to relax this requirement. We also tried to increase the gender diversity of selected users.',group_4_b,_). explanation_text('This user fulfils the competence requirement, but neither the physical closeness requirement nor some of the other requirements. To find some answers, we had to relax these requirements. We also tried to increase the gender diversity of selected users.',group_5_6_a,_). explanation_text('This user fulfils the physical closeness requirement, but neither the competence requirement nor some of the other requirements. To find some answers, we had to relax these requirements. We also tried to increase the gender diversity of selected users.',group_5_6_b,_)."
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('notAnswerTransaction',_) and get_profile_id(Me) and not(get_task_requester_id(Me)) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('reportQuestionTransaction',_) and get_profile_id(Me) and not(get_task_requester_id(Me)) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Notify to the users about best answer",
			"whenever": "is_received_do_transaction('bestAnswerTransaction',Attributes) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(Transaction,TransactionId) and wenet_actioneer_id_of_transaction(ActioneerId,Transaction)",
			"thenceforth": "add_message_transaction() and close_task() and send_message(ActioneerId,'bestAnswerTransaction',json([transactionId=TransactionId]))"
		},
		{
			"description": "Notify the user that its answer is picked",
			"whenever": "is_received(_,'bestAnswerTransaction',Attributes) and get_attribute(TransactionId,transactionId,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId)",
			"thenceforth": "send_user_message('AnsweredPickedMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId]))"
		},
		{
			"description": "Ask more users",
			"whenever": "is_received_do_transaction('moreAnswerTransaction',Attributes) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed()) and who_to_ask(Users) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and get_task_attribute_value(MaxAnswers,'maxAnswers') and <(AnswersCount,MaxAnswers) and get_attribute(NewExpirationDate,expirationDate,Attributes)",
			"thenceforth": "add_message_transaction() and send_messages(Users,'notifyNewQuestionAndAnswer',json([])) and cancel_expiration_event()  and put_task_attribute('expirationDate',NewExpirationDate) and send_expiration_event()",
			"ontology": ":- dynamic cancel_expiration_event/0. cancel_expiration_event() :-  get_task_state_attribute(TimerId,'timerId',''), ( TimerId = '' -> wenet_log_error('No previous event to cancel'); ( wenet_interaction_protocol_engine_delete_event(TimerId) -> true ; wenet_log_error('Cannot cancel previous event')))."
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('reportAnswerTransaction',_) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Send expiration message if received max answers",
			"whenever": "is_received(_,'checkMaxAnswers',_) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and get_task_attribute_value(MaxAnswers,'maxAnswers') and =<(MaxAnswers,AnswersCount)",
			"thenceforth": "send_event(_,1,'notifyQuestionExpirationMessage',json([]))"
		},
		{
			"description": "Notify user of the expiration message",
			"whenever": "is_received_event('notifyQuestionExpirationMessage',_) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and get_task_id(TaskId) and get_task_goal_name(Question)",
			"thenceforth": "send_user_message('QuestionExpirationMessage',json([taskId=TaskId,question=Question,listOfTransactionIds=AnswersTransactionIds])) and cancel_expiration_event()"
		}
	]
}