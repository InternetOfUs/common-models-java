{
	"id": "ask4help_v3",
	"name": "Ask for Help",
	"description": "Ask a question into your community to helps you",
	"keywords": [
		"question",
		"answer",
		"help"
	],
	"attributes": {
		"type": "object",
		"properties": {
			"domain": {
				"description": "The chosen domain of the question",
				"type": "string",
				"nullable": false,
				"enum": [
					"studying_career",
					"physical_activity",
					"life_ponders",
					"basic_needs",
					"music",
					"arts_and_crafts",
					"leisure_activities",
					"sensitive"
				]
			},
			"anonymous": {
				"description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
				"type": "boolean",
				"default": "false",
				"nullable": false
			},
			"subjectivity": {
				"description": "The subjectivity of the answerers the user prefer to the question",
				"type": "string",
				"nullable": false,
				"enum": [
					"subject_similar",
					"subject_different",
					"subject_expert",
					"subject_random"
				]
			},
			"maxUsers": {
				"description": "The maximum number of users to which propose the question and also in the case the user requests to ask to more users",
				"type": "integer",
				"nullable": false,
				"minimum": 1,
				"default": "5"
			},
			"maxAnswers": {
				"description": "The maximum number of answers before reaching the expiration of the queston",
				"type": "integer",
				"nullable": false,
				"minimum": 1,
				"default": "15"
			},
			"expirationDate": {
				"description": "Incremented epoch datetime from creation of the task, indicating the task expiration",
				"type": "integer",
				"nullable": false
			}
		},
		"required": [
			"domain",
			"anonymous",
			"subjectivity",
			"maxUsers",
			"maxAnswers",
			"expirationDate"
		]
	},
	"transactions": {
		"answerTransactionLong": {
			"title": "Transaction to mark large answers on the incentive server",
			"type": "object",
			"nullable": true
		},
		"answerTransaction": {
			"title": "Answer to a question",
			"type": "object",
			"properties": {
				"answer": {
					"type": "string",
					"description": "The answer given by the user to the question"
				},
				"anonymous": {
					"description": "Whether to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				},
				"publish": {
					"description": "Whether to publish the answer or not",
					"type": "boolean",
					"default": "false",
					"nullable": false
				},
				"publishAnonymously": {
					"description": "Whether to publish the answer anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				}
			},
			"required": [
				"answer",
				"anonymous",
				"publish",
				"publishAnonymously"
			]
		},
		"notAnswerTransaction": {
			"title": "Ignore a question",
			"type": "object",
			"nullable": true
		},
		"reportQuestionTransaction": {
			"title": "Report a question",
			"type": "object",
			"properties": {
				"reason": {
					"description": "The reason why the question was reported",
					"type": "string",
					"nullable": false,
					"enum": [
						"abusive",
						"spam"
					]
				}
			},
			"required": [
				"reason"
			]
		},
		"bestAnswerTransaction": {
			"title": "Pick the best answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the picked answer transaction",
					"type": "string",
					"nullable": false
				},
				"reason": {
					"description": "The reason why the specific answer was picked",
					"type": "string",
					"nullable": false,
					"enum": [
						"funny",
						"thoughtful",
						"informative",
						"creative",
						"honest",
						"kind",
						"personal"
					]
				},
				"helpful": {
					"description": "How well the bot is good in connecting with users following intentions",
					"type": "string",
					"nullable": false,
					"enum": [
						"notAtAllHelpful",
						"slightlyHelpful",
						"somewhatHelpful",
						"veryHelpful",
						"extremelyHelpful"
					]
				}
			},
			"required": [
				"transactionId",
				"reason",
				"helpful"
			]
		},
		"moreAnswerTransaction": {
			"title": "Ask some more users",
			"type": "object",
			"properties": {
				"expirationDate": {
					"description": "Incremented epoch datetime from creation of the task, indicating the task expiration",
					"type": "integer",
					"nullable": false
				}
			},
			"required": [
				"expirationDate"
			]
		},
		"reportAnswerTransaction": {
			"title": "Report an answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the answer transaction that was reported",
					"type": "string",
					"nullable": false
				},
				"reason": {
					"description": "The reason why the specific answer was reported",
					"type": "string",
					"nullable": false,
					"enum": [
						"abusive",
						"spam"
					]
				}
			},
			"required": [
				"transactionId",
				"reason"
			]
		},
		"likeAnswerTransaction": {
			"title": "Like an answer",
			"type": "object",
			"properties": {
				"transactionId": {
					"description": "The id of the answer transaction that was liked",
					"type": "string",
					"nullable": false
				}
			},
			"required": [
				"transactionId"
			]
		}
	},
	"callbacks": {
		"QuestionToAnswerMessage": {
			"title": "Question to answer",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question to answer to",
					"type": "string",
					"nullable": false
				},
				"userId": {
					"description": "The id of the user who proposed the question",
					"type": "string",
					"nullable": false
				},
				"domain": {
					"description": "The chosen domain of the question",
					"type": "string",
					"nullable": false,
					"enum": [
						"studying_career",
						"physical_activity",
						"life_ponders",
						"basic_needs",
						"music",
						"arts_and_crafts",
						"leisure_activities",
						"sensitive"
					]
				},
				"anonymous": {
					"description": "Whether to ask the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"userId",
				"domain",
				"anonymous"
			]
		},
		"AnsweredQuestionMessage": {
			"title": "Answer to question",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question to answer to",
					"type": "string",
					"nullable": false
				},
				"transactionId": {
					"description": "The id of the transaction associated to the answer",
					"type": "string",
					"nullable": false
				},
				"answer": {
					"description": "The answer to the question",
					"type": "string",
					"nullable": false
				},
				"userId": {
					"description": "The id of the user who answered the question",
					"type": "string",
					"nullable": false
				},
				"anonymous": {
					"description": "Whether the user prefers to answer the question anonymously or not, if anonymous is chosen then the name of the user will not be shown",
					"type": "boolean",
					"default": "false",
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"transactionId",
				"answer",
				"userId",
				"anonymous"
			]
		},
		"AnsweredPickedMessage": {
			"title": "Answer picked",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question for which was picked the answer",
					"type": "string",
					"nullable": false
				},
				"transactionId": {
					"description": "The id of the transaction associated to the answer",
					"type": "string",
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"transactionId"
			]
		},
		"QuestionExpirationMessage": {
			"title": "Question expiration",
			"type": "object",
			"properties": {
				"taskId": {
					"description": "The id of the task associated with the question",
					"type": "string",
					"nullable": false
				},
				"question": {
					"description": "The question for which was picked the answer",
					"type": "string",
					"nullable": false
				},
				"listOfTransactionIds": {
					"description": "The ids of the transactions associated to the answer",
					"type": "array",
					"items": {
						"type": "string"
					},
					"nullable": false
				}
			},
			"required": [
				"taskId",
				"question",
				"listOfTransactionIds"
			]
		}
	},
	"norms": [
		{
			"description": "Obtain the possible users to ask",
			"whenever": "is_received_created_task() and get_app_users_to_ask(Users)",
			"thenceforth": "add_created_transaction() and put_task_state_attribute('appUsers',Users) and send_event(_,1,'selectUsersBySubjectivity',json([])) and send_expiration_event()",
			"ontology": ":- use_module(library(random)). :- dynamic get_app_users_to_ask/1,send_expiration_event/0. get_app_users_to_ask(AppUsers) :- get_app_users_except_me(UsersExceptMe), random_permutation(AppUsers,UsersExceptMe). send_expiration_event() :- get_task_attribute_value(ExpirationDate,'expirationDate'), get_now(Now), wenet_math(Delay,ExpirationDate-Now), send_event(TimerId,Delay,'notifyQuestionExpirationMessage',json([])), put_task_state_attribute('timerId',TimerId)."
		},
		{
			"description": "Select users randomly",
			"whenever": "is_received_event('selectUsersBySubjectivity',_) and get_task_attribute_value('subject_random','subjectivity') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "init_users_to_ask(Users)",
			"ontology":":- dynamic init_users_to_ask/1. init_users_to_ask(Users) :- put_task_state_attribute('subjectivityUserIds',Users), put_task_state_attribute('unaskedUserIds',Users), send_event(_,1,'initAskUsers',json([]))."
		},
		{
			"description": "Select users by similarity",
			"whenever": "is_received_event('selectUsersBySubjectivity',_) and get_task_attribute_value('subject_similar','subjectivity') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "init_users_to_ask(Users)"
		},
		{
			"description": "Select users by similarity",
			"whenever": "is_received_event('selectUsersBySubjectivity',_) and get_task_attribute_value('subject_different','subjectivity') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "init_users_to_ask(Users)"
		},
		{
			"description": "Select users by similarity",
			"whenever": "is_received_event('selectUsersBySubjectivity',_) and get_task_attribute_value('subject_expert','subjectivity') and get_task_state_attribute(Users,'appUsers')",
			"thenceforth": "init_users_to_ask(Users)"
		},
		{
			"description": "Ask to the first users",
			"whenever": "is_received_event('initAskUsers',_) and who_to_ask(Users)",
			"thenceforth": "send_messages(Users,'notifyNewQuestionAndAnswer',json([]))",
			"ontology": ":- dynamic who_to_ask/1.   who_to_ask(Users) :- get_task_state_attribute(Unasked,'unaskedUserIds'), get_task_attribute_value(MaxUsers,'maxUsers'),( ( append(Users,NewUnasked,Unasked), length(Users,MaxUsers) ) -> true; ( Users = Unasked, NewUnasked = [] ) ), !, put_task_state_attribute('unaskedUserIds',NewUnasked), !, retractall(who_to_ask(_)), asserta(who_to_ask(Users))."
		},
		{
			"description": "Notify user if it can help with a question",
			"whenever": "is_received(_,'notifyNewQuestionAndAnswer',_) and get_task_id(TaskId) and get_task_goal_name(Question) and get_task_requester_id(RequesterId) and get_task_attribute_value(Domain,'domain') and get_task_attribute_value(Anonymous,'anonymous')",
			"thenceforth": "send_user_message('QuestionToAnswerMessage',json([taskId=TaskId,question=Question,userId=RequesterId,domain=Domain,anonymous=Anonymous]))"
		},
		{
			"description": "Notify user of the expiration message",
			"whenever": "is_received_event('notifyQuestionExpirationMessage',_) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and get_task_id(TaskId) and get_task_goal_name(Question)",
			"thenceforth": "send_user_message('QuestionExpirationMessage',json([taskId=TaskId,question=Question,listOfTransactionIds=AnswersTransactionIds])) and cancel_expiration_event()",
			"ontology": ":- dynamic cancel_expiration_event/0. cancel_expiration_event() :-  get_task_state_attribute(TimerId,'timerId',''), ( TimerId = '' -> wenet_log_error('No previous event to cancel'); ( wenet_interaction_protocol_engine_delete_event(TimerId) -> true ; wenet_log_error('Cannot cancel previous event')))."
		},
		{
			"description": "Provide an answer to a question",
			"whenever": "is_received_do_transaction('answerTransaction',Attributes) and not(is_task_closed()) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_requester_id(RequesterId)",
			"thenceforth": "add_message_transaction() and send_message(RequesterId,'notifyAnswerTransaction',json([answer=Answer,anonymous=Anonymous]))"
		},
		{
			"description": "Notify the questioneer about the answer",
			"whenever": "is_received(SenderId,'notifyAnswerTransaction',Attributes) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_attribute_value(MaxAnswers,'maxAnswers') and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and <(AnswersCount,MaxAnswers) and get_attribute(Answer,answer,Attributes) and get_attribute(Anonymous,anonymous,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId) and get_transaction_id(TransactionId) and get_transaction_id(TransactionId)",
			"thenceforth": "send_user_message('AnsweredQuestionMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId,answer=Answer,userId=SenderId,anonymous=Anonymous])) and wenet_add(NewAnswersTransactionIds,TransactionId,AnswersTransactionIds) and put_task_state_attribute('answersTransactionIds',NewAnswersTransactionIds) and send_event(_,1,'checkMaxAnswers',json([]))"
		},
		{
			"description": "Send expiration message if received max answers",
			"whenever": "is_received(_,'checkMaxAnswers',_) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and get_task_attribute_value(MaxAnswers,'maxAnswers') and =<(MaxAnswers,AnswersCount)",
			"thenceforth": "send_event(_,1,'notifyQuestionExpirationMessage',json([]))"
		},
		{
			"description": "Notify to the users about best answer",
			"whenever": "is_received_do_transaction('bestAnswerTransaction',Attributes) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_transaction(Transaction,TransactionId) and wenet_actioneer_id_of_transaction(ActioneerId,Transaction)",
			"thenceforth": "add_message_transaction() and close_task() and send_message(ActioneerId,'bestAnswerTransaction',json([transactionId=TransactionId]))"
		},
		{
			"description": "Notify the user that its answer is picked",
			"whenever": "is_received(_,'bestAnswerTransaction',Attributes) and get_attribute(TransactionId,transactionId,Attributes) and get_task_goal_name(Question) and get_task_id(TaskId)",
			"thenceforth": "send_user_message('AnsweredPickedMessage',json([taskId=TaskId,question=Question,transactionId=TransactionId]))"
		},
		{
			"description": "Ask more users",
			"whenever": "is_received_do_transaction('moreAnswerTransaction',Attributes) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed()) and who_to_ask(Users) and get_task_attribute_value(ExpirationDate,'expirationDate') and is_now_less_than(ExpirationDate) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and length(AnswersTransactionIds,AnswersCount) and get_task_attribute_value(MaxAnswers,'maxAnswers') and <(AnswersCount,MaxAnswers) and get_attribute(NewExpirationDate,expirationDate,Attributes)",
			"thenceforth": "add_message_transaction() and send_messages(Users,'notifyNewQuestionAndAnswer',json([])) and cancel_expiration_event() and put_task_attribute('expirationDate',NewExpirationDate) and send_expiration_event()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('answerTransactionLong',_) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('notAnswerTransaction',_) and get_profile_id(Me) and not(get_task_requester_id(Me)) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('reportQuestionTransaction',_) and get_profile_id(Me) and not(get_task_requester_id(Me)) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('reportAnswerTransaction',_) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed())",
			"thenceforth": "add_message_transaction()"
		},
		{
			"description": "Nothing to do with this transaction only store it",
			"whenever": "is_received_do_transaction('likeAnswerTransaction',Attributes) and get_profile_id(Me) and get_task_requester_id(Me) and not(is_task_closed()) and get_attribute(TransactionId,transactionId,Attributes) and get_task_state_attribute(AnswersTransactionIds,'answersTransactionIds',[]) and member(TransactionId,AnswersTransactionIds)",
			"thenceforth": "add_message_transaction()"
		}
	]
}